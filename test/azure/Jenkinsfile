import static java.util.UUID.randomUUID

// TODO(colemickens): paramterize the subscription, tenant id, etc

// TODO(general): this could be broken out so that the config step could be parameterized...
//                so each provider can use whatever withEnv/Creds they want and populate '.config.json'

def subscriptionId = '27b750cd-ed43-42fd-9044-8d75e124ae55'
def tenantId = '72f988bf-86f1-41af-91ab-2d7cd011db47'
def dockerRepo = 'docker.io/colemickens'

node {
	deleteDir()
	checkout scm

	sh 'git rev-parse --short HEAD > commit'
	env.GIT_COMMIT = readFile('commit').trim()

	if clusterName = "" {
		clusterName = "k8s-anywhere-${env.GIT_COMMIT}"
	}
	def kanyTag = "${dockerRepo}/k8s-ignition:${env.GIT_COMMIT}"
	def ignitionTag = "${dockerRepo}/k8s-ignition:${env.GIT_COMMIT}"

	stage 'build phase2'
	dir('phase2/ignition') {
		def ignitionImg = docker.build(ignitionTag, '--pull .')
		ignitionImg.push()
	}


	stage 'build kubernetes-anywhere'
	def kanyImg = docker.build(kanyTag, '--pull .')
	kanyImg.push()


	kanyImg.inside() {
		stage "deploy cluster"
		def config = getConfig(clusterName, tenantId, subscriptionId, ignitionTag, randomUUID() as String)
		writeFile(file: '.config.json', text: config)
		writeFile(file: 'config.json', text: config)
		archiveArtifacts artifacts: 'config.json', fingerprint: true

		// intentionally suppressing some of the terraform build output
		// because it's impossible to really hide the sp client_secret
		sh("cd ./phase1/azure && ./do deploy")
		sh("cp ./phase1/azure/.tmp/kubeconfig.json ./kubeconfig.json")
		archiveArtifacts artifacts: 'kubeconfig.json', fingerprint: true


		stage "deploy cluster"
		stage 'test cluster'
		input 'test cluster?'
		withEnv(['KUBECONFIG=' + cwd() + '/phase1/azure/.tmp/kubeconfig.json']) {
			echo 'make conformtest'
			//make conformtest
		}


		stage 'deploy cluster'
		input 'destroy cluster?'
		sh("cd ./phase1/azure && ./do destroy")
	}
}

	def cwd() {
		sh 'pwd > pwd.current'
		return readFile('pwd.current').trim()
	}

	def getConfig(clusterName, tenantId, subscriptionId, ignitionTag, azureMachinePassword) {
		withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'azure_service_principal',
			usernameVariable: 'AZURE_CLIENT_ID', passwordVariable: 'AZURE_CLIENT_SECRET']]) {
				def configTest = """
					{
						"phase1": {
							"cluster_name": "${clusterName}",
							"azure": {
								"admin_password": "${azureMachinePassword}",
								"tenant_id": "${tenantId}",
								"subscription_id": "${subscriptionId}",
							"client_id": "${env.AZURE_CLIENT_ID}",
							"client_secret": "${env.AZURE_CLIENT_SECRET}"
						}
					},
					"phase2": {
						"installer_container": "${ignitionTag}"
					}
				}
			""".trim()

			writeFile(file: 'testconfig.json', text: configTest)

			def configTemplatePath = 'test/azure/config.json.template'
			def configTemplate = readFile('test/azure/config.json.template')
			return sh (
				script: "jq -s '.[0] * .[1]' ${configTemplatePath} testconfig.json",
				returnStdout: true
			).trim()
		}
	}
